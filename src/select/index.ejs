<%
// path function begin
// - - - - - - - - - - - - - - - - - - - - - - - -
var absolutePath = data.domain + filename.split(data.developDir)[filename.split(data.developDir).length - 1].replace('index.ejs', '').replace('.ejs', '.html');
var relativePath = '../'.repeat([absolutePath.replace(data.domain, '').split('/').length - 1]);
%> <%- include(relativePath +'common/_path', {absolutePath:absolutePath, relativePath:relativePath})
%> <%
//
var path = pagePath();
// - - - - - - - - - - - - - - - - - - - - - - - -
// path function end
//
//
// page info
// - - - - - - - - - - - - - - - - - - - - - - - -
var page = {
    title: 'select item',
    desc: 'Draw googlemap',
    ogp: {
        image: '',
        type: 'website'
    },
    singleCss: [],
    singleJs: [],
    modifier: 'basic'
};
%> <%
// = = = = = = = = = = = = = = = = = = = =
//
// html begin
//
// = = = = = = = = = = = = = = = = = = = =
%> <%- include(path.re +'common/parts/_head', {page:page, path:path}) %>

<main class="main<% if(page.modifier) { %> main--<%= page.modifier %> <% } %>">


        <section class="hero is-bold">
            <div class="hero-body">
                <div class="container">
                    <h1 class="title">
                        Select
                    </h1>
                    <h2 class="subtitle">
                        Display selected location with marker.
                    </h2>
                </div>
            </div>
        </section>


    <div class="container">
        <div class="columns">

<%- include(path.re +'common/parts/_sidebar', {page:page, path:path}) %>


            <div class="column is-three-quarters">
                <div class="tabs">
                    <ul>
                        <li class="is-active">
                            <a class="js-btn"
                               data-name="京都タワー"
                               data-marker="<%= path.img %>marker/01.png"
                            >京都タワー</a>
                        </li>
                        <li>
                            <a class="js-btn"
                               data-name="二条城"
                               data-marker="<%= path.img %>marker/02.png"
                            >二条城</a>
                        </li>
                        <li>
                            <a class="js-btn"
                               data-name="八坂神社"
                               data-marker="<%= path.img %>marker/03.png"
                            >八坂神社</a>
                        </li>
                        <li>
                            <a class="js-btn"
                               data-name="清水寺"
                               data-marker="<%= path.img %>marker/01.png"
                            >清水寺</a>
                        </li>
                    </ul>
                </div>
                <div class="box">
                    <div style="height: 100vh;" id="js-map"></div>
                </div>

            </div>

        </div>
    </div>

</main>
<script src="https://maps.googleapis.com/maps/api/js?v=3&key=AIzaSyBKLlm2n4ldGHejEWQY5bFaiogNYSxDoTQ"></script>
<script src="<%= path.js %>index.js"></script>

<script>
  const gMap = () => {

    /**
     * マップ要素を取得する
     * @type {Element}
     */
    let canvas = document.getElementById('js-map');

    /**
     * マップのオブジェクト
     * @type {null}
     */
    let map = null;

    /**
     * マーカーーを格納する配列
     * @type {Array}
     */
    let markers = [];


    /**
     * デフォルトでマーカーを表示するオブジェクト
     * @type {[Object]}
     */
    let placeDefault = [
      {
        name: '平安神宮',
        marker: '../assets/images/marker/01.png'
      },
      {
        name: '東寺',
        marker: '../assets/images/marker/01.png'
      }
    ];

    /**
     * デフォルトの数
     * @type {number}
     */
    let defaultNumber = 2;

    /**
     * トリガーから取得した情報のオブジェクト
     * @type {[Object]}
     */
    let place = [];

    /**
     * マーカーを切り替える
     * @param index
     */
    const markerToggle = (index) => {

      for (let i = 0; i < markers.length; i++) {

        markers[i].setMap(null);

        if (markers.length === i + 1) {

          markers[index + defaultNumber].setMap(map);

        }

      }

      for (let i = 0; i < defaultNumber; i++) {

        markers[i].setMap(map);

      }

    };

    let buttons =  document.getElementsByClassName('js-btn');

    /**
     * トリガーから得た情報の配列を作る / イベントのセット
     * @type {NodeList}
     */
    [].forEach.call(buttons, (el, i) => {

      place.push({});
      place[i].name = el.getAttribute('data-name');
      place[i].marker = el.getAttribute('data-marker');

      el.addEventListener('click', (e) => {

        e.preventDefault();
        let index = Array.prototype.indexOf.call(buttons, e.currentTarget);

        markerToggle(index);

      });

    });


    /**
     * ジオコーダーで、場所から緯度経度を取り出す
     * @type {google.maps.Geocoder}
     */
    let geocoder = new google.maps.Geocoder();

    const getCenter = (place, i) => {

      return new Promise((onFullfilled) => {

        geocoder.geocode({
          address: place
        }, function(results, status) {

          if (status === google.maps.GeocoderStatus.OK) {

            if (Array.isArray(place)) {

              place[i].address = results[0].geometry.location;
              onFullfilled(place[i].address);

            } else {

              let center = results[0].geometry.location;
              onFullfilled(center);

            }

          } else {

            console.group('Error');

          }

        });

      });

    };

    /**
     * マップを生成しマーカーを立てる
     * @type {Object}
     */
    const mapSet = (center, pin) => {

      /**
       * マップを作成
       */
      if (map === null) {

        /**
         * マップのオプション
         * @type {{zoom: number, center: *}}
         */
        let mapOptions = {
          zoom: 12,
          center: center,
        };

        map = new google.maps.Map(canvas, mapOptions);

      } else {

        /**
         * マーカーのセット
         */
        let marker = new google.maps.Marker({
          position: center,
          map: map,
          icon: {
            url: pin,
          }
        });

        markers.push(marker);

      }

    };

    const init = async () => {

      let center = await getCenter('京都駅');
      mapSet(center);

      for (let i = 0; i < placeDefault.length; i++) {

        let center = await getCenter(placeDefault[i].name, i);
        mapSet(center, placeDefault[i].marker);

      }

      for (let i = 0; i < place.length; i++) {

        let center = await getCenter(place[i].name, i);
        mapSet(center, place[i].marker);
        markerToggle(0);

      }


    };
    init();

  };


  document.addEventListener('DOMContentLoaded', () => {

    gMap();

  });
</script>

<%
// = = = = = = = = = = = = = = = = = = = =
//
// html end
//
// = = = = = = = = = = = = = = = = = = = =
%>
